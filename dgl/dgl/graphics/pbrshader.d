/*
Copyright (c) 2016 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dgl.graphics.pbrshader;

import dlib.core.memory;
import dgl.core.api;
import dgl.core.event;
import dgl.graphics.material;
import dgl.graphics.shader;

/*
 * PBRShader is similar to UberShader, but it is physically-based.
 * Uses normalized Cook-Torrance specular model, Fresnel reflections and
 * equirectangular environment maps for both diffuse and specular indirect lighting.
 * Note that the resulting picture can differ from UberShader, some material
 * parameters may require fine tuning to be PBR-copliant. 
 * This shader is in experimental state.
 */

private string _pbrVertexShader = q{
    varying vec4 shadowCoord;
    varying vec3 position;
    varying vec3 n, t, b;
    varying vec3 E;
    varying vec2 spheremapTexcoord;
    
    varying vec3 worldView;
    uniform mat4 dgl_InvViewMatrix;
    
    uniform bool dgl_NormalMapping;
        
    void main(void)
    {
        gl_TexCoord[0] = gl_MultiTexCoord0;
        gl_TexCoord[1] = gl_MultiTexCoord1;

        n = normalize(gl_NormalMatrix * gl_Normal);
        t = normalize(gl_NormalMatrix * gl_MultiTexCoord2.xyz);
        b = cross(n, t);
        vec4 eyeVertex = gl_ModelViewMatrix * gl_Vertex;
        position = eyeVertex.xyz;
    
        vec3 worldPos = (dgl_InvViewMatrix * eyeVertex).xyz;
        vec3 worldCamPos = (dgl_InvViewMatrix[3]).xyz;
        worldView = normalize(worldPos - worldCamPos);
        
        E = position;
        if (dgl_NormalMapping)
        {
            E.x = dot(position, t);
            E.y = dot(position, b);
            E.z = dot(position, n);
        }
        E = -normalize(E);
        
        vec3 r = reflect(normalize(position), n);
        float m = 2.0 * sqrt( 
            pow(r.x, 2.0) + 
            pow(r.y, 2.0) + 
            pow(r.z + 1.0, 2.0) 
        );
        spheremapTexcoord = r.xy / m + 0.5;
        
        shadowCoord = gl_TextureMatrix[7] * (gl_ModelViewMatrix * gl_Vertex);
        
        gl_Position = ftransform();
    }
};

private string _pbrFragmentShader = q{
    #version 120
    #define PI 3.14159265
    #define ST_BOXBLUR 0
    #define ST_POISSONDISK 1
    #define ST_HARDEDGES 2
    
    varying vec4 shadowCoord;
    varying vec3 position;
    varying vec3 n, t, b;
    varying vec3 E;
    varying vec2 spheremapTexcoord;
    
    varying vec3 worldView;
    uniform mat4 dgl_ViewMatrix;
        
    uniform sampler2D dgl_Texture0; // Diffuse/Albedo map
    uniform sampler2D dgl_Texture1; // Normal map
    uniform sampler2D dgl_Texture2; // Emission map
    uniform sampler2D dgl_Texture3; // PBR map (R = Specularity, G = Rougness, B = Metallic)
    uniform sampler2D dgl_Texture4; // Environment map (equirectangular)
    uniform sampler2DShadow dgl_Texture7; // Shadow map
    
    uniform bool dgl_Shadeless;
    uniform bool dgl_Shadow;
    uniform bool dgl_Textures;
    uniform bool dgl_NormalMapping;
    uniform bool dgl_ParallaxMapping;
    uniform bool dgl_GlowMap;
    uniform bool dgl_Fog;
    uniform bool dgl_Matcap;
    uniform bool dgl_EnvMapping;
    uniform int dgl_ShadowType;
    
    uniform float dgl_Specularity;
    uniform float dgl_Roughness;
    uniform float dgl_Metallic;
    uniform bool dgl_PBRMapping;
    
    uniform float dgl_ShadowMapSize;
    
    const float parallaxScale = 0.03;
    const float parallaxBias = -0.01;
    const float lightRadiusSqr = 16.0; //11.0
    
    const float oneOverPI8 = 1.0 / (8.0 * PI);
    const float PI2 = PI * 2.0;
    
    vec2 poissonDisk[8] = vec2[](
        vec2(-0.4913322, 0.5801218),
        vec2(0.259665, 0.6641022),
        vec2(-0.67159, -0.08862627),
        vec2(-0.134518, 0.07916691),
        vec2(0.4003105f, 0.1283183),
        vec2(-0.03193351, -0.7121831),
        vec2(0.6394898, -0.4947422),
        vec2(-0.6561151, -0.6154207)
    );
        
    float shadowMapLookup(vec4 coord, vec2 offset)
	{
        vec2 texelSize = vec2(1.0) / dgl_ShadowMapSize;
        vec2 v = offset * texelSize * coord.w;
        vec4 res = shadow2DProj(dgl_Texture7, coord + vec4(v.x, v.y, 0.0, 0.0)); //0.001
        return res.z;
	}

    float shadowBoxBlur(vec4 coord)
    {
        float shadow = 0.0;
        float x, y;
        const float size = 2.0;
        for (y = -size; y < size; y += 1.0)
        for (x = -size; x < size; x += 1.0)
            shadow += shadowMapLookup(coord, vec2(x, y));
        return shadow / (size * size * 4.0);
    }
    
    float shadowPoissonDisk(vec4 coord)
    {
        float shadow = 0.0;
        int i;
        for (i = 0; i < 8; i++)
        {
            shadow += shadowMapLookup(coord, poissonDisk[i] * 5.0);
        }
        return shadow / 8.0;
    }
    
    float beckmann(float NH, float roughness)
	{
        float NH_sq = NH * NH;
        float NH_sq_r = 1.0 / (NH_sq * roughness * roughness);
        float roughness_exp = (NH_sq - 1.0) * NH_sq_r;
        return exp(roughness_exp)*NH_sq_r/(4.0*NH_sq);
    }
    
    float cookTorrance(
        vec3 lightDirection,
        vec3 viewDirection,
        vec3 surfaceNormal,
        float roughness,
        float fresnel)
    {
        float VdotN = max(dot(viewDirection, surfaceNormal), 0.0);
        float LdotN = max(dot(lightDirection, surfaceNormal), 0.0);
        vec3 H = normalize(lightDirection + viewDirection);
        float NdotH = max(dot(surfaceNormal, H), 0.0);
        float VdotH = max(dot(viewDirection, H), 0.000001);
        float LdotH = max(dot(lightDirection, H), 0.000001);
        float G = 2.0 * NdotH / max(VdotH, 0.000001);
        G = min(1.0, G * min(VdotN, LdotN));
        float D = beckmann(NdotH, roughness);
        float F = fresnel + pow(1.0 - VdotH, 5.0) * (1.0 - fresnel);
        return  G * F * D / max(PI * VdotN, 0.000001);
    }
    
    vec2 envMapEquirect(vec3 dir)
    {
        float phi = acos(dir.y);
        float theta = atan(dir.x, dir.z) + PI;
        return vec2(theta / PI2, phi / PI);
    }

    void main(void) 
    {
        vec3 nn = normalize(n);
        vec3 tn = normalize(t);
        vec3 bn = normalize(b);
        
        // Parallax mapping
        vec2 offsTexCoords = gl_TexCoord[0].st;
        if (dgl_ParallaxMapping)
        {
            vec2 eye2 = vec2(E.x, -E.y);
            float height = texture2D(dgl_Texture1, offsTexCoords).a; 
            height = height * parallaxScale + parallaxBias;
            offsTexCoords = offsTexCoords + (height * eye2);
        }
        
        // Normal, reflect and texcoords
        vec3 N = dgl_NormalMapping? normalize(2.0 * texture2D(dgl_Texture1, offsTexCoords).rgb - 1.0) : nn;
        vec3 eyeN = dgl_NormalMapping? mat3(tn, bn, nn) * N : N;
        vec3 worldN = eyeN * mat3(dgl_ViewMatrix);
        vec3 worldR = reflect(normalize(worldView), worldN);
        vec2 texCoords = offsTexCoords;
        
        // Fog
        float fogDistance = gl_FragCoord.z / gl_FragCoord.w;
        float fogFactor = dgl_Fog? 
            clamp((gl_Fog.end - fogDistance) / (gl_Fog.end - gl_Fog.start), 0.0, 1.0) :
            1.0;
        
        // Shadow
        float shadow = 1.0;
        if (dgl_Shadow)
        {
            if (shadowCoord.w > 0.0)
            {                
                shadow = 0.0;
                if (dgl_ShadowType == ST_BOXBLUR)
                    shadow = shadowBoxBlur(shadowCoord);
                else if (dgl_ShadowType == ST_POISSONDISK)
                    shadow = shadowPoissonDisk(shadowCoord);
                else if (dgl_ShadowType == ST_HARDEDGES)
                    shadow = shadowMapLookup(shadowCoord, vec2(0, 0));
                else
                    shadow = 1.0; // Unknown shadow type
            }
        }
        
        // Shadeless material
        if (dgl_Shadeless)
        {
            vec4 tex = dgl_Textures? texture2D(dgl_Texture0, texCoords) : gl_FrontMaterial.diffuse;
            vec4 finalColor = tex * gl_FrontMaterial.ambient + tex * shadow;
            
            gl_FragColor = mix(gl_Fog.color, finalColor, fogFactor);
            gl_FragColor.a = dgl_Textures? tex.a : mix(1.0, gl_FrontMaterial.diffuse.a, fogFactor);
            return;
        }
        
        // PBR textures
        vec4 albedo = dgl_Textures? texture2D(dgl_Texture0, texCoords) : gl_FrontMaterial.diffuse;
        float specularity = dgl_PBRMapping? texture2D(dgl_Texture3, texCoords).r : dgl_Specularity;
        float roughness = dgl_PBRMapping? texture2D(dgl_Texture3, texCoords).g : dgl_Roughness;
        roughness = mix(0.0, 1.0, roughness);
        float metallic = dgl_PBRMapping? texture2D(dgl_Texture3, texCoords).b : dgl_Metallic;
        metallic = mix(0.001, 1.0, metallic);

        // IBL
        int lod = int(10.0 * roughness);
        int diffLod = int(11.0 * 0.8);
        vec4 ambTex = dgl_EnvMapping? texture2DLod(dgl_Texture4, envMapEquirect(worldN), diffLod) : gl_FrontMaterial.ambient;
        vec4 ambTexSpec = dgl_EnvMapping? texture2DLod(dgl_Texture4, envMapEquirect(worldR), lod) : gl_FrontMaterial.ambient;
        
        // Emission
        vec4 emit = dgl_GlowMap?
            texture2D(dgl_Texture2, texCoords) * gl_FrontMaterial.emission.w :
            vec4(0.0, 0.0, 0.0, 1.0);
        
        vec3 directionToLight;
        float distanceToLight;
        float attenuation = 1.0; 
        vec3 L;
            
        vec4 col_d = vec4(0.0, 0.0, 0.0, 1.0);
        vec4 col_s = vec4(0.0, 0.0, 0.0, 1.0);
        vec4 col_r = vec4(0.0, 0.0, 0.0, 1.0);

        float diffuse;
        float specular;
        
        vec3 positionToLightSource;

        float NE = max(0.0, dot(N, E));

        for (int i = 0; i < 6; i++)
        {
            if (gl_LightSource[i].position.w < 2.0)
            {
                //vec4 Ms = gl_FrontMaterial.specular;
                vec4 Ld = gl_LightSource[i].diffuse; 
                vec4 Ls = gl_LightSource[i].specular;
            
                if (gl_LightSource[i].position.w > 0.0)
                {
                    positionToLightSource = vec3(gl_LightSource[i].position.xyz - position);
                    distanceToLight = length(positionToLightSource);
                    directionToLight = normalize(positionToLightSource);
            
                    attenuation = clamp(1.0 - distanceToLight/lightRadiusSqr, 0.0, 1.0);
                }
                else
                {
                    directionToLight = normalize(vec3(gl_LightSource[i].position));
                    attenuation = 1.0;
                }
                
                L = dgl_NormalMapping? 
                    vec3(dot(directionToLight, tn),
                         dot(directionToLight, bn),
                         dot(directionToLight, nn)) : 
                    directionToLight;
                
                // Diffuse term
                diffuse = clamp(dot(N, L), 0.0, 1.0);
                               
                // Specular term
                specular = clamp(cookTorrance(L, E, N, roughness, 0.3), 0.0, 1.0);

                col_d += Ld*diffuse*attenuation;
                col_s += Ls*specular*attenuation;
            }
        }

        float fresnel = (1.0 - roughness) * pow(1.0 - NE, 5.0);
        vec4 c1 = (albedo * (ambTex + col_d * shadow) + col_s * specularity * shadow) * (1.0 - metallic) + ((albedo * ambTexSpec + col_s) * specularity) * metallic;
        vec4 c2 = c1 * (1.0 - fresnel) + ambTexSpec * fresnel;
        vec4 finalColor = emit + c2;

        gl_FragColor = mix(gl_Fog.color, finalColor, fogFactor);
        gl_FragColor.a = dgl_Textures? albedo.a : mix(1.0, gl_FrontMaterial.diffuse.a, fogFactor);
    }
};

class PBRShader: Shader
{       
    this()
    {
        super(_pbrVertexShader, _pbrFragmentShader);
    }
    
    override bool supported()
    {
        return 
            DerelictGL.isExtensionSupported("GL_ARB_shading_language_100") &&
            DerelictGL.isExtensionSupported("GL_EXT_gpu_shader4");
    }
}
