/*
Copyright (c) 2015-2016 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dgl.graphics.ubershader;

import dlib.core.memory;
import dgl.core.api;
import dgl.core.event;
import dgl.graphics.material;
import dgl.graphics.shader;

/*
 * Uber-shader can handle any type of material that can be
 * defined by Material object.
 * It supports up to 6 light sources, 
 * including directional and point lights.
 * It also supports normal mapping, parallax mapping,
 * normalized Blinn-Phong specular term,
 * soft shadows, self-illumination and fog.
 *
 * Uber-shader requires GLSL version 1.2.
 */

private string _uberVertexShader = q{
    varying vec4 shadowCoord;
    varying vec3 position;
    varying vec3 n, t, b;
    varying vec3 E;
    varying vec2 spheremapTexcoord;
    
    uniform bool dgl_NormalMapping;
        
    void main(void)
    {
        gl_TexCoord[0] = gl_MultiTexCoord0;
        gl_TexCoord[1] = gl_MultiTexCoord1;

        n = normalize(gl_NormalMatrix * gl_Normal);
        t = normalize(gl_NormalMatrix * gl_MultiTexCoord2.xyz);
        b = cross(n, t);
        position = (gl_ModelViewMatrix * gl_Vertex).xyz;
        
        E = position;
        if (dgl_NormalMapping)
        {
            E.x = dot(position, t);
            E.y = dot(position, b);
            E.z = dot(position, n);
        }
        E = -normalize(E);
        
        vec3 r = reflect(normalize(position), n);
        float m = 2.0 * sqrt( 
            pow(r.x, 2.0) + 
            pow(r.y, 2.0) + 
            pow(r.z + 1.0, 2.0) 
        );
        spheremapTexcoord = r.xy / m + 0.5;
        
        shadowCoord = gl_TextureMatrix[7] * (gl_ModelViewMatrix * gl_Vertex);
        
        gl_Position = ftransform();
    }
};

private string _uberFragmentShader = q{
    #version 120
    #define PI 3.141592
    #define ST_BOXBLUR 0
    #define ST_POISSONDISK 1
    #define ST_HARDEDGES 2
    
    varying vec4 shadowCoord;
    varying vec3 position;
    varying vec3 n, t, b;
    varying vec3 E;
    varying vec2 spheremapTexcoord;
        
    uniform sampler2D dgl_Texture0;
    uniform sampler2D dgl_Texture1;
    uniform sampler2D dgl_Texture2;
    //uniform sampler2D dgl_Texture3;
    uniform sampler2DShadow dgl_Texture7;
    
    uniform bool dgl_Shadeless;
    uniform bool dgl_Shadow;
    uniform bool dgl_Textures;
    uniform bool dgl_NormalMapping;
    uniform bool dgl_ParallaxMapping;
    uniform bool dgl_GlowMap;
    uniform bool dgl_Fog;
    uniform bool dgl_Matcap;
    uniform int dgl_ShadowType;
    uniform float dgl_Specularity;
    
    uniform float dgl_ShadowMapSize;
    
    const float parallaxScale = 0.03;
    const float parallaxBias = -0.01;
    const float lightRadiusSqr = 16.0; //11.0
    
    const float oneOverPI8 = 1.0 / (8.0 * PI);
    
    vec2 poissonDisk[8] = vec2[](
        vec2(-0.4913322, 0.5801218),
        vec2(0.259665, 0.6641022),
        vec2(-0.67159, -0.08862627),
        vec2(-0.134518, 0.07916691),
        vec2(0.4003105f, 0.1283183),
        vec2(-0.03193351, -0.7121831),
        vec2(0.6394898, -0.4947422),
        vec2(-0.6561151, -0.6154207)
    );
        
    float lookup(sampler2DShadow depths, vec4 coord, vec2 offset)
	{
        vec2 texelSize = vec2(1.0) / dgl_ShadowMapSize;
        vec2 v = offset * texelSize * coord.w;
        vec4 res = shadow2DProj(depths, coord + vec4(v.x, v.y, 0.001, 0.0));
        return res.z;
	}
    
    float edgeBias(float value, float b)
    {
        return (b > 0.0)? pow(value, log2(b) / log2(0.5)) : 0.0;
    }
    
    float shadowBoxBlur(vec4 coord)
    {
        float shadow = 0.0;
        float x, y;
        const float size = 2.0;
        for (y = -size; y < size; y += 1.0)
        for (x = -size; x < size; x += 1.0)
            shadow += lookup(dgl_Texture7, coord, vec2(x, y));
        return shadow / (size * size * 4.0);
    }
    
    float shadowPoissonDisk(vec4 coord)
    {
        float shadow = 0.0;
        int i;
        for (i = 0; i < 8; i++)
        {
            shadow += lookup(dgl_Texture7, coord, poissonDisk[i] * 5.0);
        }
        return shadow / 8.0;
    }

    void main(void) 
    {
        vec2 texCoords = dgl_Matcap? -spheremapTexcoord : gl_TexCoord[0].st;
        
        // Fog term
        float fogDistance = gl_FragCoord.z / gl_FragCoord.w;
        float fogFactor = dgl_Fog? 
            clamp((gl_Fog.end - fogDistance) / (gl_Fog.end - gl_Fog.start), 0.0, 1.0) :
            1.0;
        
        // Shadow term
        float shadow = 1.0;

        if (dgl_Shadow)
        {
            if (shadowCoord.w > 0.0)
            {                
                shadow = 0.0;
                if (dgl_ShadowType == ST_BOXBLUR)
                    shadow = shadowBoxBlur(shadowCoord);
                else if (dgl_ShadowType == ST_POISSONDISK)
                    shadow = shadowPoissonDisk(shadowCoord);
                else if (dgl_ShadowType == ST_HARDEDGES)
                    shadow = lookup(dgl_Texture7, shadowCoord, vec2(0, 0));
                else
                    shadow = 1.0; // Unknown shadow type
            }
        }
        
        if (dgl_Shadeless)
        {
            vec4 tex = dgl_Textures? texture2D(dgl_Texture0, texCoords) : gl_FrontMaterial.diffuse;
            vec4 finalColor = tex * gl_FrontMaterial.ambient + tex * shadow;
            
            gl_FragColor = mix(gl_Fog.color, finalColor, fogFactor);
            gl_FragColor.a = dgl_Textures? tex.a : mix(1.0, gl_FrontMaterial.diffuse.a, fogFactor);
            return;
        }

        if (dgl_ParallaxMapping)
        {
            vec2 eye2 = vec2(E.x, -E.y);
            float height = texture2D(dgl_Texture1, texCoords).a; 
            height = height * parallaxScale + parallaxBias;
            texCoords = texCoords + (height * eye2);
        }
        
        vec3 nn = normalize(n);
        vec3 tn = normalize(t);
        vec3 bn = normalize(b);
        
        // Normal mapping
        vec3 N = dgl_NormalMapping? normalize(2.0 * texture2D(dgl_Texture1, texCoords).rgb - 1.0) : nn;
    
        // Texture
        vec4 tex = dgl_Textures? texture2D(dgl_Texture0, texCoords) : vec4(1.0, 1.0, 1.0, 1.0);
        
        // Emission term
        vec4 emit = dgl_GlowMap?
            texture2D(dgl_Texture2, texCoords) * gl_FrontMaterial.emission.w :
            vec4(0.0, 0.0, 0.0, 1.0);
        
        vec3 directionToLight;
        float distanceToLight;
        float attenuation = 1.0; 
        vec3 L;
            
        vec4 col_d = vec4(0.0, 0.0, 0.0, 1.0);
        vec4 col_s = vec4(0.0, 0.0, 0.0, 1.0);
        vec4 col_r = vec4(0.0, 0.0, 0.0, 1.0);

        float diffuse;
        float specular;
        
        vec3 positionToLightSource;
        vec3 H;
        float NL;
        float NH;

        for (int i = 0; i < 6; i++)
        {
            if (gl_LightSource[i].position.w < 2.0)
            {
                vec4 Md = gl_FrontMaterial.diffuse;
                vec4 Ms = gl_FrontMaterial.specular;
                vec4 Ld = gl_LightSource[i].diffuse; 
                vec4 Ls = gl_LightSource[i].specular;
            
                if (gl_LightSource[i].position.w > 0.0)
                {
                    positionToLightSource = vec3(gl_LightSource[i].position.xyz - position);
                    distanceToLight = length(positionToLightSource);
                    directionToLight = normalize(positionToLightSource);
            
                    attenuation = clamp(1.0 - distanceToLight/lightRadiusSqr, 0.0, 1.0);
                }
                else
                {
                    directionToLight = normalize(vec3(gl_LightSource[i].position));
                    attenuation = 1.0;
                }
                
                L = dgl_NormalMapping? 
                    vec3(dot(directionToLight, tn),
                         dot(directionToLight, bn),
                         dot(directionToLight, nn)) : 
                    directionToLight;
                
                // Diffuse term
                diffuse = clamp(dot(N, L), 0.0, 1.0); // Lambert
                               
                // Specular term
                H = normalize(L + E);
                NH = dot(N, H);
                specular = pow(max(NH, 0.0), 3.0 * gl_FrontMaterial.shininess); // Blinn-Phong
                specular *= (gl_FrontMaterial.shininess + 2.0) * oneOverPI8; // Normalization

                col_d += Md*Ld*diffuse*attenuation;
                col_s += Ms*Ls*specular*attenuation*dgl_Specularity;
            }
        }

        vec4 finalColor = emit + tex * gl_FrontMaterial.ambient + (tex * col_d + col_s) * shadow;
        
        gl_FragColor = mix(gl_Fog.color, finalColor, fogFactor);
        gl_FragColor.a = dgl_Textures? tex.a : mix(1.0, gl_FrontMaterial.diffuse.a, fogFactor);
    }
};

class UberShader: Shader
{       
    this()
    {
        super(_uberVertexShader, _uberFragmentShader);
    }
}
